// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ATrous5x5
#pragma kernel ATrous5x512
#pragma kernel ATrous5x58

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> ShadowInput;
RWTexture2D<float4> FilteredOutput;
float StepWidth;
uint Iteration;

static const float aTrousFilter5x5[5][5] =
{
	1.0 / 256.0, 1.0 / 64.0, 3.0 / 128.0, 1.0 / 64.0, 1.0 / 256.0,
	1.0 / 64.0, 1.0 / 16.0, 3.0 / 32.0, 1.0 / 16.0, 1.0 / 64.0,
	3.0 / 128.0, 3.0 / 32.0, 9.0 / 64.0, 3.0 / 32.0, 3.0 / 128.0,
	1.0 / 64.0, 1.0 / 16.0, 3.0 / 32.0, 1.0 / 16.0, 1.0 / 64.0,
	1.0 / 256.0, 1.0 / 64.0, 3.0 / 128.0, 1.0 / 64.0, 1.0 / 256.0
};

static const float offset[25][2] =
{
	{ -2, -2 },
	{ -1, -2 },
	{  0, -2 },
	{  1, -2 },
	{  2, -2 },

	{ -2, -1 },
	{ -1, -1 },
	{  0, -1 },
	{  1, -1 },
	{  2, -1 },

	{ -2,  0 },
	{ -1,  0 },
	{  0,  0 },
	{  1,  0 },
	{  2,  0 },

	{ -2,  1 },
	{ -1,  1 },
	{  0,  1 },
	{  1,  1 },
	{  2,  1 },

	{ -2,  2 },
	{ -1,  2 },
	{  0,  2 },
	{  1,  2 },
	{  2,  2 }
};

[numthreads(24,24,1)]
void ATrous5x5(uint3 dispatchThreadId : SV_DispatchThreadID)
{
	float4 shadowValue = ShadowInput.Load(dispatchThreadId);
	float4 positionValue = ShadowInput.Load(dispatchThreadId);

	float ShadowPhi = 1.0;
	float PositionPhi = 0.3;
	float NormalPhi = 0.5;

	float4 sum = float4(0, 0, 0, 0);
	float4 normalValue = float4(ShadowInput.Load(dispatchThreadId).xyz, 1.0f);

	float cumW = 0.0f;
	float weight = 0.0f;
	float shadowW = 0.0f;
	float normalW = 0.0f;
	float positionW = 0.0f;
	float4 t = 0.0f;
	float distance2 = 0.0f;

	for (int x = 0; x < 5; x++)
	{
		for (int y = 0; y < 5; y++)
		{
			int i = 5 * x + y;
			int3 uv = dispatchThreadId + int3(offset[i][0], offset[i][1], 0) * StepWidth;

			// shadow
			float4 shadowTmp = ShadowInput.Load(uv);
			t = shadowValue - shadowTmp;
			distance2 = dot(t, t);
			shadowW = min(exp(-(distance2) / ShadowPhi), 1.0f);

			// normal
			float4 normalTmp = float4(ShadowInput.Load(uv).xyz, 1.0f);
			t = normalValue - normalTmp;
			distance2 = max(dot(t, t), 0.0f);
			normalW = min(exp(-(distance2) / NormalPhi), 1.0f);

			// Position
			float4 positionTmp = float4(ShadowInput.Load(uv).xyz, 1.0f);
			t = positionValue - positionTmp;
			distance2 = dot(t, t);
			positionW = min(exp(-(distance2) / PositionPhi), 1.0f);

			float weightedKernel = aTrousFilter5x5[x][y];
			sum += shadowTmp * weightedKernel;
			cumW += weightedKernel;
		}
	}

	FilteredOutput[dispatchThreadId.xy] = sum / cumW;
}

[numthreads(12, 12, 1)]
void ATrous5x512(uint3 dispatchThreadId : SV_DispatchThreadID)
{
	float4 shadowValue = ShadowInput.Load(dispatchThreadId);
	float4 positionValue = ShadowInput.Load(dispatchThreadId);

	float ShadowPhi = 1.0;
	float PositionPhi = 0.3;
	float NormalPhi = 0.5;

	float4 sum = float4(0, 0, 0, 0);
	float4 normalValue = float4(ShadowInput.Load(dispatchThreadId).xyz, 1.0f);

	float cumW = 0.0f;
	float weight = 0.0f;
	float shadowW = 0.0f;
	float normalW = 0.0f;
	float positionW = 0.0f;
	float4 t = 0.0f;
	float distance2 = 0.0f;

	for (int x = 0; x < 5; x++)
	{
		for (int y = 0; y < 5; y++)
		{
			int i = 5 * x + y;
			int3 uv = dispatchThreadId + int3(offset[i][0], offset[i][1], 0) * StepWidth;

			// shadow
			float4 shadowTmp = ShadowInput.Load(uv);
			t = shadowValue - shadowTmp;
			distance2 = dot(t, t);
			shadowW = min(exp(-(distance2) / ShadowPhi), 1.0f);

			// normal
			float4 normalTmp = float4(ShadowInput.Load(uv).xyz, 1.0f);
			t = normalValue - normalTmp;
			distance2 = max(dot(t, t), 0.0f);
			normalW = min(exp(-(distance2) / NormalPhi), 1.0f);

			// Position
			float4 positionTmp = float4(ShadowInput.Load(uv).xyz, 1.0f);
			t = positionValue - positionTmp;
			distance2 = dot(t, t);
			positionW = min(exp(-(distance2) / PositionPhi), 1.0f);

			float weightedKernel = aTrousFilter5x5[x][y];
			sum += shadowTmp * weightedKernel;
			cumW += weightedKernel;
		}
	}

	FilteredOutput[dispatchThreadId.xy] = sum / cumW;
}

[numthreads(8, 8, 1)]
void ATrous5x58(uint3 dispatchThreadId : SV_DispatchThreadID)
{
	float4 shadowValue = ShadowInput.Load(dispatchThreadId);
	float4 positionValue = ShadowInput.Load(dispatchThreadId);

	float ShadowPhi = 1.0;
	float PositionPhi = 0.3;
	float NormalPhi = 0.5;

	float4 sum = float4(0, 0, 0, 0);
	float4 normalValue = float4(ShadowInput.Load(dispatchThreadId).xyz, 1.0f);

	float cumW = 0.0f;
	float weight = 0.0f;
	float shadowW = 0.0f;
	float normalW = 0.0f;
	float positionW = 0.0f;
	float4 t = 0.0f;
	float distance2 = 0.0f;

	for (int x = 0; x < 5; x++)
	{
		for (int y = 0; y < 5; y++)
		{
			int i = 5 * x + y;
			int3 uv = dispatchThreadId + int3(offset[i][0], offset[i][1], 0) * StepWidth;

			// shadow
			float4 shadowTmp = ShadowInput.Load(uv);
			t = shadowValue - shadowTmp;
			distance2 = dot(t, t);
			shadowW = min(exp(-(distance2) / ShadowPhi), 1.0f);

			// normal
			float4 normalTmp = float4(ShadowInput.Load(uv).xyz, 1.0f);
			t = normalValue - normalTmp;
			distance2 = max(dot(t, t), 0.0f);
			normalW = min(exp(-(distance2) / NormalPhi), 1.0f);

			// Position
			float4 positionTmp = float4(ShadowInput.Load(uv).xyz, 1.0f);
			t = positionValue - positionTmp;
			distance2 = dot(t, t);
			positionW = min(exp(-(distance2) / PositionPhi), 1.0f);

			float weightedKernel = aTrousFilter5x5[x][y];
			sum += shadowTmp * weightedKernel;
			cumW += weightedKernel;
		}
	}

	FilteredOutput[dispatchThreadId.xy] = sum / cumW;
}